import fs from 'node:fs/promises'
import { createServer as createHttpServer } from 'node:http'
import express from 'express'
import path from 'node:path'

// Constants
const isProduction = process.env.NODE_ENV === 'production'
const port = process.env.PORT || 3005
const root = process.cwd()

// Cached production assets
const templateHtml = isProduction
    ? await fs.readFile('./dist/client/index.html', 'utf-8')
    : ''

function resolve(p) {
    return path.resolve(root, p);
}


async function createServer() {
    let app = express()

    let vite
    if (!isProduction) {
        const { createServer } = await import('vite')
        vite = await createServer({
            root: root,
            server: {
                middlewareMode: "ssr",
                allowedHosts: true,
                host: true,
                port: 3005,
            },
            appType: 'custom',
        })
        app.use(vite.middlewares)
    } else {
        // Set production settings
        const compression = await import('compression')
        app.use(compression.default());
        // Serve static assets generated by Vite and any public files
        app.use('/assets', express.static(resolve('dist/client/assets')))
        app.use(express.static(resolve('dist/client')))
    }

    // Serve HTML
    app.all('*', async (req, res) => {
        try {
            const url = req.originalUrl

            let template
            let render
            if (!isProduction) {
                // Always read fresh template in development
                template = await fs.readFile('./index.html', 'utf-8')
                template = await vite.transformIndexHtml(url, template)
                render = await vite.ssrLoadModule('/src/entry-server.jsx').then(m => m.render)
            } else {
                template = templateHtml
                render = (await import(root + '/dist/server/entry-server.js')).render
            }

            const rendered = await render(url)

            const appHtml = typeof rendered === 'string' ? rendered : (rendered.html ?? '')
            const status = typeof rendered === 'object' && rendered !== null ? (rendered.status ?? 200) : 200

            const html = template.replace(`<!-- SSR OUTLET -->`, appHtml)

            res.status(status).set({ 'Content-Type': 'text/html' }).send(html)
        } catch (e) {
            if (!isProduction) {
                vite?.ssrFixStacktrace(e)
            }

            console.log(e.stack)
            res.status(500).end(e.stack)
        }
    })

    process.on('uncaughtException', (err) => {
        console.error(err)
        process.exit(1)
    })

    // Error handling middleware
    app.use((err, req, res, next) => {
        console.error(err.stack)
        res.status(500).end(err.stack)
    })

    return app
}



// Start http server
createServer().then((app) => {
    app.listen(port, () => {
        console.log(`HTTP server is running at http://localhost:${port}`);
    });
}).catch((err) => {
    console.error(err)
    process.exit(1)
})